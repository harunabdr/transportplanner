@using Transport_Planner.Services
@using Transport_Planner.Models

@page "/"
<div class="heading-for-form">
    Plan a journey
</div>

<div class="box-around-input">

    @*Textboxes for users to input and submit button*@

    <div><input @bind="fromPoint" class="from-textbox" list="stop-results" type="text" placeholder="From" autocomplete="off" @oninput="OnChange" /></div>
    <div><input @bind="toPoint" class="from-textbox" list="stop-results" type="text" placeholder="To" autocomplete="off" @oninput="OnChange" /></div>
    <div><button class="submit-button" @onclick="OnClick">Plan my journey</button></div>

</div>

<div class="results">

    @if (results != null && results.Journeys != null)
    {

        @for (var i = 1; i <= results.Journeys.Count; i++)
        {
            @*iterate through results and display summary to user*@
            <div>Journey @i</div>
            <div>Departure Time: @results.Journeys[i - 1].StartDateTime.ToShortTimeString()</div>

            @foreach (var leg in results.Journeys[i - 1].Legs)
            {
                <div>@leg.Instruction.Summary</div>
            }

            <div>Arrival Time: @results.Journeys[i - 1].ArrivalDateTime.ToShortTimeString()</div>
            <div>Cost: £@GetFare((double)results.Journeys[i - 1].Fare.TotalCost)</div>


            <br />


        }
    }
</div>



<datalist id="stop-results">

    @*if search term is not null, lookup search term and iterate via matched stops*@

    @if (response != null && response.Matches != null)
    {
        @*search terms with 6 characters are wide geographical locations, so are excluded from the list*@

        @foreach (var match in response.Matches.Where(m => m.Id.Length > 6))
        {
            @*iterate through results and populate into the textbox*@

            <option>@match.Name</option>
        }
    }
</datalist>

@code {

    public int i;
    private string fromPoint;
    private string toPoint;
    private ApiGeolocationResponse response;
    private ApiSearchResults results;
    private string value { get; set; }


    private void OnChange(ChangeEventArgs args)
    {
        value = (string)args.Value;

        //if length of entry into textbox is longer than 3 characters then it looks up via API for full matches

        if (value.Length > 3)
        {
            var tflClientService = new TFLClientService();
            response = tflClientService.GetLocations(value);
        }

    }

    private void OnClick()
    {
        var tflClientService = new TFLClientService();
        var firstPoint = tflClientService.GetLocations(fromPoint);
        var secondPoint = tflClientService.GetLocations(toPoint);

        results = tflClientService.GetJourney(firstPoint.Matches.First().Id, secondPoint.Matches.First().Id);
    }

    private string GetFare(double fare)
    {
        return (fare / 100).ToString();
    }
}
